# Copy keys into place
# This assumes that the server and client certificates and chains etc are all available
# In future we will allow then to be generated

- name: Put up the keys
  block:
    - name: Create the target keys directory
      file:
        path: "{{ mysql_tls_certdir }}"
        state: directory
        owner: "{{ mysql_tls_certdir_owner }}"
        group: "{{ mysql_tls_certdir_group }}"
        mode: "{{ mysql_tls_certdir_perms }}"
      become: yes

    - name: Put up the server & client certificates
      copy:
        src: "{{ item.src }}/{{ item.name }}"
        dest: "{{ mysql_tls_certdir }}/{{ item.name }}"
        owner: "{{ mysql_tls_certdir_owner }}"
        group: "{{ mysql_tls_certdir_group }}"
        mode: 0440
      with_items: "{{ mysql_tls_cert_files }}"
      become: yes
  when: not mysql_tls_generate_certs | bool and mysql_tls_upload_certs
# generate the keys if required


# generate the keys

- name: Generate certificates
  block:
    - name: Create the target keys directory
      file:
        path: "{{ mysql_tls_certdir }}"
        state: directory
        owner: "{{ mysql_tls_certdir_owner }}"
        group: "{{ mysql_tls_certdir_group }}"
        mode: "{{ mysql_tls_certdir_perms }}"
      become: yes
    - name: Create the certificate details file
      template:
        src: tls-metadata.cnf.j2
        dest: "{{ mysql_tls_certdir }}/tls-metadata.cnf"

    - name: Create a new CA key
      command:  "openssl genrsa 2048 > {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}-key.pem"
      become: yes
      args:
        creates: "{{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}-key.pem"

    - name: Generate the certificate using that key
      command:  "openssl req -new -x509 -nodes -days 365000 -key {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}-key.pem -out {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}-cert.pem -config {{ mysql_tls_certdir }}/tls-metadata.cnf"
      become: yes
      args:
        creates: "{{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}-cert.pem"

    - name: create the server key
      command:  "openssl req -newkey rsa:2048 -days 365000 -nodes -keyout {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}server-key.pem -out {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}server-req.pem -config {{ mysql_tls_certdir }}/tls-metadata.cnf"
      become: yes
      args:
        creates: "{{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}server-key.pem"

    - name: process the server RSA key
      command:  "openssl rsa -in {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}server-key.pem -out {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}server-key.pem"
      become: yes

    - name: sign the server certificate
      command:  "openssl x509 -req -in {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}server-req.pem -days 365000 -CA {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}-cert.pem -CAkey {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}-key.pem -set_serial 01 -out {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}server-cert.pem"
      become: yes

    - name: create the client key
      command:  "openssl req -newkey rsa:2048 -days 365000 -nodes -keyout {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}client-key.pem -out {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}client-req.pem -config {{ mysql_tls_certdir }}/tls-metadata.cnf"
      become: yes
      args:
        creates: "{{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}client-key.pem"

    - name: process the client RSA key
      command:  "openssl rsa -in {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}client-key.pem -out {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}client-key.pem"
      become: yes

    - name: sign the client certificate
      command:  "openssl x509 -req -in {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}client-req.pem -days 365000 -CA {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}-cert.pem -CAkey {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}-key.pem -set_serial 01 -out {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}client-cert.pem"
      become: yes

    - name: Correct the permissions of the certificates and keys
      file:
        dest: "{{ mysql_tls_certdir }}"
        owner: "{{ mysql_tls_certdir_owner }}"
        group: "{{ mysql_tls_certdir_group }}"
        recurse: yes
      become: yes

    # need to check the output of this
    # if ok then certificate name: OK
    # may get certificate signature failure
    - name: verify the certificates to make sure everything was created correctly
      command:  "openssl verify -CAfile {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}-cert.pem {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}server-cert.pem {{ mysql_tls_certdir }}/{{ mysql_tls_cert_prefix }}client-cert.pem"
      register: verifyresult
      failed_when: "'certificate signature failure' in verifyresult.stdout"
  rescue:
    - debug:
        msg: "Failed to validate the certificates: {{ verifyresult }}"
  when: mysql_tls_generate_certs | bool


# update the config
- name: Update the configs
  block:
    - name: Copy MySQL server TLS configuration.
      template:
        src: "{{ item.src }}"
        dest: "{{ item.path }}/{{ item.name }}"
        owner: root
        group: root
        mode: 0644
      with_items: "{{ mysql_tls_config_files }}"
      notify: restart mysql
  when: mysql_tls_update_cfg | bool
